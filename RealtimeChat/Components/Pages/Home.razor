@page "/"
@inject Services.ChatService ChatService
@inject Services.UserService UserService
@inject Services.ProfanityService ProfanityService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@implements IDisposable

<PageTitle>Realtime Chat</PageTitle>

@if (_currentUser == null)
{
    <MudOverlay Visible="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>
}
else
{
    <MudContainer MaxWidth="MaxWidth.False">
        <MudPaper Class="mt-4 pa-4">
            @foreach (var chats in _groupedChats)
            {
	            var user = UserService.GetById(chats.Key);

                @if (user != null)
                {
                    <MudChat ChatPosition="@(_currentUser.Id == user.Id ? ChatBubblePosition.End : ChatBubblePosition.Start)">
                        <MudChatHeader Name="@user.Name" Time="@chats.First().CreatedAt.ToString("HH:mm:ss")" />
                        <MudAvatar Color="@user.Color">@user.Initials</MudAvatar>
                        @foreach (var chat in chats)
                        {
                            <MudChatBubble>
                                @chat.Message
                            </MudChatBubble>
                        }
                    </MudChat>
                }
            }

            <div class="d-flex align-center justify-space-between flex-shrink-0">
                <MudTextField
                    @ref="_newChatMessageField"
                    @bind-Text="@_newChatMessage"
                    T="string"
                    Label="@($"Chat as {_currentUser.Name}")"
                    HelperText="Please don't send anything rude or offensive, otherwise I might have to turn this off."
                    Variant="Variant.Outlined"
                    Class="mt-4 mr-4"
                    Validation="ValidateNewChatMessage"
                    OnlyValidateIfDirty="true"
                    Immediate="true"
                    MaxLength="500"
                    Counter="500"
                    OnKeyDown="OnKeyDown" />
                <MudButton
                    OnClick="@SendMessage"
                    StartIcon="@Icons.Material.Filled.Send"
                    Variant="Variant.Filled"
                    Color="_currentUser.Color"
                    Size="Size.Large"
                    Style="height: 56px; margin-top: -11px;"
                    Disabled="(_newChatMessageField?.HasErrors ?? true) || (_newChatMessage?.Length == 0)"
                >
                    Send
                </MudButton>
            </div>
        </MudPaper>
    </MudContainer>
}

@code
{
    private Models.User? _currentUser;
    private string? _newChatMessage = "";

    private IEnumerable<IGrouping<string, Models.Chat>> _groupedChats = [];

    private MudTextField<string> _newChatMessageField;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ChatService.UpdateHandler += RefreshChats;
        UserService.UpdateHandler += Logout;
    }

    public void Dispose()
    {
        ChatService.UpdateHandler -= RefreshChats;
        UserService.UpdateHandler -= Logout;
    }

    private async void RefreshChats()
    {
        _groupedChats = ChatService.GroupedChats;
        await InvokeAsync(() => StateHasChanged());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) await Login();
    }

    private async Task Login()
    {
        var user_id = await LocalStorage.GetItemAsync<string>("user_id");
        if (user_id != null)
        {
            var user = UserService.GetById(user_id);
            if (user == null)
            {
                _currentUser = null;
                _groupedChats = [];
                await LocalStorage.RemoveItemAsync("user_id");
            }
            else
            {
                _currentUser = user;
                RefreshChats();
                return;
            }
        }

        var dialogOptions = new DialogOptions() { BackdropClick = false, CloseOnEscapeKey = false, CloseButton = false };
        var dialog = await DialogService.ShowAsync<Dialogs.Login>("Login", dialogOptions);
        var result = await dialog.Result;

        if (result == null || result.Canceled) return;

        var name = result.Data?.ToString();

        if (name == null) return; // Problem

        _currentUser = UserService.Add(name);

        CookieOptions options = new CookieOptions();
        options.Expires = DateTime.Now.AddDays(1);
        await LocalStorage.SetItemAsync<string>("user_id", _currentUser.Id);

        RefreshChats();
    }

    private async void Logout()
    {
        _currentUser = null;
        _groupedChats = [];
        await LocalStorage.RemoveItemAsync("user_id");

        await Login();
    }

    private async Task OnKeyDown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Code.EndsWith("Enter"))
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (_currentUser == null)
        {
            Snackbar.Add("User not logged in. Refresh the page.", Severity.Error);
            return;
        }

        await _newChatMessageField.Validate();
        if (_newChatMessageField.HasErrors) return;

        ChatService.Add(_currentUser, _newChatMessage!);
        await _newChatMessageField.Clear();

        // Little hack to clear out the field text.
        await _newChatMessageField.BlurAsync();
        await _newChatMessageField.FocusAsync();
    }

    private IEnumerable<string> ValidateNewChatMessage(string value)
    {
        List<string> errors = [];
        if (string.IsNullOrEmpty(value)) return errors;

        if (string.IsNullOrWhiteSpace(value)) errors.Add("Message can't be whitespace");

        if (ProfanityService.ContainsProfanity(value)) errors.Add("Message contains profanity, please remove it");

        if (value.Contains("TechFast", StringComparison.InvariantCultureIgnoreCase)) errors.Add("Woah, this is a mega swear word. Don't do that.");

        return errors;
    }
}