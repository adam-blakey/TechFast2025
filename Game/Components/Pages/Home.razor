@page "/"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@inject Game.Data.CharacterService CharacterService
@implements IAsyncDisposable

@if (UserIcon == null)
{
    <h3>Select Your Icon</h3>
    <div class="icon-selection">   
        @for (int i = 0; i < AvailableIcons.Count; i++)
        {
            int iLocal = i;
            <Blazicon Svg="AvailableIcons[i]" style="height: 3em; width: 3em;" @onclick="() => SelectIcon(iLocal)" class="@($"icon-choice {(IconAlreadySelected(iLocal) ? "disabled" : "")}")" />
        }
    </div>
}
else
{
    <div class="map-container" @onmouseup="StopDragging" @onmousemove="Drag">
        @foreach (var kvp in Characters)
        {
            <Blazicon Svg="AvailableIcons[kvp.Value.IconId]" style="@($"position: absolute; left: {Math.Clamp(kvp.Value.X, MIN_POSITION, MAX_POSITION)}px; top: {Math.Clamp(kvp.Value.Y, MIN_POSITION, MAX_POSITION)}px;")" class="@($"character {(kvp.Key == UserId ? "draggable user-character" : "")}")"
                 @onmousedown="() => StartDragging(kvp.Key)" />
        }
    </div>
}

@code {
    private string UserId = Guid.NewGuid().ToString();
    private SvgIcon? UserIcon;
    private HubConnection? hubConnection;
    private bool IsDragging = false;
    private string? DraggingUserId;
    private int DragOffsetX, DragOffsetY;

    private const int CHARACTER_WIDTH = 50;
    private const int MAP_WIDTH = 500;
    private const int MAX_POSITION = MAP_WIDTH - CHARACTER_WIDTH;
    private const int MIN_POSITION = 0;

    private Dictionary<string, Game.Models.CharacterState> Characters = new();

    private readonly List<SvgIcon> AvailableIcons = new()
    {
		MdiIcon.ChessKnight,
        MdiIcon.PacMan,
        MdiIcon.Penguin,
        MdiIcon.Dog,
        MdiIcon.Cat,
        MdiIcon.Rabbit,
        MdiIcon.WizardHat,
        MdiIcon.SailBoat,
        MdiIcon.DiceMultiple,
        MdiIcon.DiceD20,
        MdiIcon.SwordCross,
        MdiIcon.TreasureChest,
        MdiIcon.MapMarker,
        MdiIcon.FlagCheckered,
        MdiIcon.Castle,
        MdiIcon.Crown,
        MdiIcon.Trophy,
        MdiIcon.ShieldCross,
        MdiIcon.MagicStaff,
        MdiIcon.Gold,
        MdiIcon.Compass,
        MdiIcon.Target,
        MdiIcon.AccountGroup,
        MdiIcon.AccountTie,
        MdiIcon.Puzzle
	};

    protected override async Task OnInitializedAsync()
    {
        // Existing characters.
        Characters = CharacterService.Characters;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/characterhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, Game.Models.CharacterState>("ReceivePosition", (userId, state) =>
        {
            Characters[userId] = state;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("ReceiveCharacterRemoval", (userId) =>
        {
            Characters.Remove(userId);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task SelectIcon(int iconId)
    {
        if (IconAlreadySelected(iconId)) return;

        UserIcon = AvailableIcons[iconId];
        var state = new Game.Models.CharacterState
        {
            IconId = iconId,
            X = 250,
            Y = 250
        };
        Characters[UserId] = state;
        await SendPosition();
    }

    private void StartDragging(string userId)
    {
        if (userId != UserId) return;
        IsDragging = true;
        DraggingUserId = userId;
    }

    private void Drag(MouseEventArgs e)
    {
        if (IsDragging && DraggingUserId == UserId && Characters.TryGetValue(UserId, out var state))
        {
            state.X = (int)e.ClientX - (CHARACTER_WIDTH / 2) - 2; // 2px for the container border.
            state.Y = (int)e.ClientY - (CHARACTER_WIDTH / 2) - 2; // 2px for the container border.
            Characters[UserId] = state;
        }
    }

    private async void StopDragging()
    {
        await SendPosition();

        IsDragging = false;
        DraggingUserId = null;
    }

    private async Task SendPosition()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdatePosition", UserId, Characters[UserId]);
        }
    }

    private bool IconAlreadySelected(int iconId) => Characters.Select(c => c.Value.IconId).Contains(iconId);

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ReceiveCharacterRemoval", UserId);
        }
    }
}
